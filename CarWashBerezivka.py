import asyncio
import asyncpg
import os
import re
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from datetime import datetime, timedelta
from dotenv import load_dotenv

API_TOKEN = os.getenv("API_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
BUFFER_MINUTES = 1


if not API_TOKEN:
    raise RuntimeError("API_TOKEN –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É .env")
if not DATABASE_URL:
    raise RuntimeError("DATABASE_URL –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É .env")

print("API_TOKEN:", "***" if API_TOKEN else None)
print("DATABASE_URL:", "***" if DATABASE_URL else None)

# --- Aiogram ---
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ ---
MAIN_ADMIN_ID = 863294823
user_booking: dict[int, dict] = {}

# --- –ü—É–ª –∑'—î–¥–Ω–∞–Ω—å PostgreSQL ---
pool: asyncpg.Pool | None = None

# ---------- –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ë–î ----------
CREATE_TABLES_SQL = """
CREATE TABLE IF NOT EXISTS programs (
    id SERIAL PRIMARY KEY,
    name TEXT UNIQUE,
    duration INTEGER NOT NULL,
    price NUMERIC(12,2) DEFAULT 0,
    description TEXT DEFAULT ''
);

CREATE TABLE IF NOT EXISTS admins (
    user_id BIGINT PRIMARY KEY
);

CREATE TABLE IF NOT EXISTS users (
    user_id BIGINT PRIMARY KEY,
    username TEXT,
    phone_number TEXT,
    first_name TEXT,
    last_name TEXT,
    registered_at TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS bookings (
    id SERIAL PRIMARY KEY,
    user_id BIGINT,
    username TEXT,
    phone_number TEXT,
    program_id INTEGER REFERENCES programs(id) ON DELETE SET NULL,
    car_number TEXT,
    booking_datetime TIMESTAMP WITHOUT TIME ZONE,
    status TEXT DEFAULT 'scheduled',        -- scheduled | in_progress | finished
    actual_start TIMESTAMP,
    actual_end TIMESTAMP
);

-- –ú—ñ–≥—Ä–∞—Ü—ñ—ó –¥–ª—è —Å—Ç–∞—Ä–∏—Ö –ë–î (–¥—Ä—É–∂–Ω—ñ –¥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É)
ALTER TABLE programs
    ADD COLUMN IF NOT EXISTS price NUMERIC(12,2) DEFAULT 0;
ALTER TABLE programs
    ADD COLUMN IF NOT EXISTS description TEXT DEFAULT '';
"""

async def init_db():
    async with pool.acquire() as conn:
        # –í–∏–∫–æ–Ω—É—î–º–æ —è–∫ –æ–¥–∏–Ω —Å–∫—Ä–∏–ø—Ç
        await conn.execute(CREATE_TABLES_SQL)

# ---------- –•–ï–õ–ü–ï–†–ò –î–õ–Ø –ë–î ----------
async def db_fetch(query: str, *args):
    async with pool.acquire() as conn:
        return await conn.fetch(query, *args)

async def db_fetchrow(query: str, *args):
    async with pool.acquire() as conn:
        return await conn.fetchrow(query, *args)

async def db_execute(query: str, *args):
    async with pool.acquire() as conn:
        return await conn.execute(query, *args)

async def save_user(user: types.User, phone_number: str | None = None):
    await db_execute(
        """
        INSERT INTO users (user_id, username, phone_number, first_name, last_name)
        VALUES ($1, $2, $3, $4, $5)
        ON CONFLICT (user_id) DO UPDATE
        SET username = EXCLUDED.username,
            phone_number = COALESCE(EXCLUDED.phone_number, users.phone_number),
            first_name = EXCLUDED.first_name,
            last_name = EXCLUDED.last_name
        """,
        user.id,
        user.username,
        phone_number,
        user.first_name,
        user.last_name
    )
# ---------- –î–û–ü–û–ú–Ü–ñ–ù–ï ----------
async def get_programs():
    rows = await db_fetch(
        "SELECT id, name, duration, price, description FROM programs ORDER BY id"
    )
    # –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏–º–æ —É –∑–≤–∏—á–∞–π–Ω—ñ tuples
    return [(r["id"], r["name"], r["duration"], float(r["price"] or 0), r["description"] or "") for r in rows]

async def is_admin(user_id: int) -> bool:
    if user_id == MAIN_ADMIN_ID:
        return True
    row = await db_fetchrow("SELECT 1 FROM admins WHERE user_id=$1", user_id)
    return bool(row)


async def notify_next_after_buffer(finished_booking_id: int):
    finished_booking = await db_fetchrow(
        "SELECT booking_datetime FROM bookings WHERE id=$1", finished_booking_id
    )
    if not finished_booking:
        return

    next_booking = await db_fetchrow(
        """
        SELECT b.id, b.user_id, b.car_number, b.booking_datetime
        FROM bookings b
        WHERE b.status='scheduled' AND b.booking_datetime > $1
        ORDER BY b.booking_datetime ASC, b.id ASC
        LIMIT 1
        """,
        finished_booking["booking_datetime"]
    )

    if not next_booking:
        return

    # ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ü–µ —Ç–æ–π —Å–∞–º–∏–π –¥–µ–Ω—å
    if next_booking["booking_datetime"].date() != finished_booking["booking_datetime"].date():
        return

    notify_time = finished_booking["booking_datetime"] + timedelta(minutes=BUFFER_MINUTES)
    now = datetime.now()
    delay_seconds = max((notify_time - now).total_seconds(), 0)

    async def delayed_notify():
        await asyncio.sleep(delay_seconds)
        await send_notify(
            next_booking["user_id"],
            f"üöó –í–∞—à–∞ –º–∏–π–∫–∞ (ID {next_booking['id']}, –∞–≤—Ç–æ {next_booking['car_number']}) "
            f"–º–æ–∂–µ —Ä–æ–∑–ø–æ—á–∞—Ç–∏—Å—è —Ä–∞–Ω—ñ—à–µ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–∏—ó–∂–¥–∂–∞–π—Ç–µ –∑–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ."
        )

    asyncio.create_task(delayed_notify())


async def send_notify(user_id: int, text: str):
        try:
            await bot.send_message(user_id, text)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")


async def get_available_hours(program_id: int, booking_date: datetime.date):
    # 1) –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–∏
    dur_row = await db_fetchrow("SELECT duration FROM programs WHERE id=$1", program_id)
    if not dur_row:
        return []
    duration = int(dur_row["duration"] or 0)

    # 2) –†–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏
    WORK_START_HOUR = 9
    WORK_END_HOUR = 21  # –∫—ñ–Ω–µ—Ü—å —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è (–ø–æ—á–∞—Ç–æ–∫ —Å–ª–æ—Ç–∞ < 19:00)
    day_start = datetime.combine(booking_date, datetime.min.time())
    work_start = day_start + timedelta(hours=WORK_START_HOUR)
    work_end = day_start + timedelta(hours=WORK_END_HOUR)

    # 3) –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–∏–π —Å—Ç–∞—Ä—Ç (—â–æ–± –Ω–µ –ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –º–∏–Ω—É–ª–µ)
    now = datetime.now()
    min_allowed_start = work_start
    if booking_date == now.date():
        min_allowed_start = max(work_start, now + timedelta(minutes=BUFFER_MINUTES))

    # 4) –ö–∞–Ω–¥–∏–¥–∞—Ç–∏ (–ø–æ—á–∏–Ω–∞—î–º–æ –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É, —è–∫ —ñ –±—É–ª–æ)
    candidate_starts = [
        day_start + timedelta(hours=h)
        for h in range(WORK_START_HOUR, WORK_END_HOUR)  # 9:00..18:00 –≤–∫–ª—é—á–Ω–æ
    ]

    # 5) –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Ü—å–æ–≥–æ –¥–Ω—è (–¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–µ—Ä–µ—Ç–∏–Ω—ñ–≤)
    booked = await db_fetch(
        """
        SELECT b.booking_datetime AS bdt, p.duration AS pdur, b.status, b.actual_start, b.actual_end
        FROM bookings b
        LEFT JOIN programs p ON p.id = b.program_id
        WHERE b.booking_datetime::date = $1
        """,
        booking_date,
    )

    available = []
    for start in candidate_starts:
        # –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–µ, —â–æ —Ä–∞–Ω—ñ—à–µ –∑–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–∏–π —Å—Ç–∞—Ä—Ç
        if start < min_allowed_start:
            continue

        end = start + timedelta(minutes=duration)

        # –Ω–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ —Å–ª–æ—Ç–∏, —è–∫—ñ –∑–∞–∫—ñ–Ω—á—É—é—Ç—å—Å—è –ø—ñ—Å–ª—è –∫—ñ–Ω—Ü—è —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è
        if end > work_end:
            continue

        # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ—Ç–∏–Ω—ñ–≤ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Å—Ç–∞—Ç—É—Å—ñ–≤ —ñ –±—É—Ñ–µ—Ä–∞
        conflict = False
        for rec in booked:
            if rec["status"] in ("in_progress", "finished"):
                b_start = rec["actual_start"] or rec["bdt"]
                b_end = rec["actual_end"] or (b_start + timedelta(minutes=int(rec["pdur"] or 0)))
            else:
                b_start = rec["bdt"]
                b_end = b_start + timedelta(minutes=int(rec["pdur"] or 0))

            # –±—É—Ñ–µ—Ä –Ω–∞–≤–∫–æ–ª–æ –∑–∞–π–Ω—è—Ç–æ–≥–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É
            b_start -= timedelta(minutes=BUFFER_MINUTES)
            b_end += timedelta(minutes=BUFFER_MINUTES)

            if not (end <= b_start or start >= b_end):
                conflict = True
                break

        if not conflict:
            available.append(start.strftime("%H:%M"))

    return available



def generate_date_buttons(days_ahead=7):
    today = datetime.today().date()
    buttons = [[KeyboardButton(text=(today + timedelta(days=i)).strftime("%d.%m.%Y"))] for i in range(days_ahead)]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# --- –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ---
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üßæ –ü—Ä–æ–≥—Ä–∞–º–∏"), KeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç–∏ –∞–≤—Ç–æ")],
        [KeyboardButton(text="üìã –ú–æ—ó –∑–∞–ø–∏—Å–∏")],
    ],
    resize_keyboard=True
)
@router.message(lambda m: m.text == "‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞")
async def btn_help(message: types.Message):
    await help_command(message)

@router.message(lambda m: m.text == "üßæ –ü—Ä–æ–≥—Ä–∞–º–∏")
async def btn_programs(message: types.Message):
    await show_programs(message)

@router.message(lambda m: m.text == "üìù –ó–∞–ø–∏—Å–∞—Ç–∏ –∞–≤—Ç–æ")
async def btn_book(message: types.Message):
    await book_program(message)

@router.message(lambda m: m.text == "üìã –ú–æ—ó –∑–∞–ø–∏—Å–∏")
async def btn_my_bookings(message: types.Message):
    await my_bookings(message)


# ---------- –ö–û–ú–ê–ù–î–ò ----------
@router.message(Command("start"))
async def start(message: types.Message):
    await save_user(message.from_user)
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å—É –Ω–∞ –º–∏–π–∫—É. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –∞–±–æ –∫–æ–º–∞–Ω–¥—É /help.",
        reply_markup=main_menu
    )



@router.message(Command("help"))
async def help_command(message: types.Message):
    base_text = (
        "üìå –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n\n"
        "/start - –ø–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è\n"
        "/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/programs - –ø—Ä–æ–≥—Ä–∞–º–∏ –º–∏–π–∫–∏\n"
        "/book - –∑–∞–ø–∏—Å–∞—Ç–∏ –∞–≤—Ç–æ\n"
        "/my_bookings - –ø–µ—Ä–µ–≥–ª—è–¥ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –∞–≤—Ç–æ\n"
    )
    admin_text = ""
    if await is_admin(message.from_user.id):
        admin_text = (
            "\nüõ† –ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏:\n"
            "/show_booking [–¥–∞—Ç–∞|user_id|–Ω–æ–º–µ—Ä –∞–≤—Ç–æ] - –ø–æ–∫–∞–∑–∞—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è\n"
            "/start_wash <ID> - –ø–æ—á–∞—Ç–∏ –º–∏–π–∫—É \n"
            "/finish_wash <ID> - –∑–∞–≤–µ—Ä—à–∏—Ç—å –º–∏–π–∫—É\n"
            "/add_program <–Ω–∞–∑–≤–∞> <–≥–æ–¥:—Ö–≤:—Å–µ–∫> <—Ü—ñ–Ω–∞> <–æ–ø–∏—Å>\n"
            "/edit <ID> [<dd.mm.yyyy>] [<HH:MM>] [status <scheduled|in_progress|finished>]\n"
            "/delete <ID> - –≤–∏–¥–∞–ª–∏—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è\n"
            "/edit_program <id> <name|duration|price|description> <–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è>\n"
            "/show_statistic <–¥–∞—Ç–∞_–ø–æ—á–∞—Ç–∫—É> [<–¥–∞—Ç–∞_–∫—ñ–Ω—Ü—è>]\n"
            "/add_admin <user_id>\n"
            "/del_admin <user_id>\n"
            "/admins - —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤\n"
        )
    await message.answer(base_text + admin_text)

@router.message(Command("users"))
async def list_users(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–º–∞—î –ø—Ä–∞–≤")
        return

    rows = await db_fetch("SELECT user_id, username, phone_number, first_name, last_name, registered_at FROM users ORDER BY registered_at DESC")

    if not rows:
        await message.answer("üì≠ –ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
        return

    text = "üìã –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:\n\n"
    for r in rows[:50]:  # –æ–±–º–µ–∂–∏–º–æ –≤–∏–≤—ñ–¥, —â–æ–± –Ω–µ –±—É–ª–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–æ–≥–æ —Ç–µ–∫—Å—Ç—É
        text += (
            f"üÜî {r['user_id']} | @{r['username'] or '‚Äî'}\n"
            f"üë§ {r['first_name'] or ''} {r['last_name'] or ''}\n"
            f"üìû {r['phone_number'] or '‚Äî'}\n"
            f"üìÖ {r['registered_at'].strftime('%d.%m.%Y %H:%M')}\n"
            f"-----------------------------\n"
        )

    await message.answer(text)
@router.message(Command("programs"))
async def show_programs(message: types.Message):
    programs = await get_programs()
    if not programs:
        await message.answer("–ü—Ä–æ–≥—Ä–∞–º–∏ —â–µ –Ω–µ –¥–æ–¥–∞–Ω—ñ.")
        return

    text = "–ü—Ä–æ–≥—Ä–∞–º–∏ –º–∏–π–∫–∏:\n\n"
    for p in programs:
        program_id, name, duration, price, description = p
        hours = duration // 60
        minutes = duration % 60
        if hours > 0:
            time_str = f"{hours} –≥–æ–¥ {'{} —Ö–≤'.format(minutes) if minutes > 0 else ''}"
        else:
            time_str = f"{minutes} —Ö–≤"
        text += (
            f"{program_id} - {name}\n"
            f"üïí {time_str} | üíµ {price:.2f} –≥—Ä–Ω\n"
            f"üìÑ {description}\n"
            f"-----------------------------\n"
        )
    await message.answer(text)

@router.message(Command("my_bookings"))
async def my_bookings(message: types.Message):
    user_id = message.from_user.id

    rows = await db_fetch(
        """
        SELECT b.id, p.name AS program_name, b.car_number, b.booking_datetime, b.status
        FROM bookings b
        LEFT JOIN programs p ON p.id = b.program_id
        WHERE b.user_id=$1 AND b.status IN ('scheduled', 'in_progress')
        ORDER BY b.booking_datetime ASC
        """,
        user_id
    )

    if not rows:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤.")
        return

    text = "üìã –í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Å–∏:\n\n"
    for r in rows:
        booking_time = r["booking_datetime"].strftime("%d.%m.%Y %H:%M")
        text += (
            f"üÜî ID: {r['id']}\n"
            f"üßæ –ü—Ä–æ–≥—Ä–∞–º–∞: {r['program_name']}\n"
            f"üöó –ê–≤—Ç–æ: {r['car_number']}\n"
            f"üìÖ –ß–∞—Å: {booking_time}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {r['status']}\n"
            f"-----------------------------\n"
        )

    await message.answer(text)


@router.message(Command("start_wash"))
async def start_wash(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–º–∞—î –ø—Ä–∞–≤")
        return

    parts = message.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        await message.answer("‚ö† –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /start_wash <ID>")
        return

    booking_id = int(parts[1])
    row = await db_fetchrow("SELECT status FROM bookings WHERE id=$1", booking_id)
    if not row:
        await message.answer("‚ùå –¢–∞–∫–æ–≥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–µ —ñ—Å–Ω—É—î")
        return

    status = row["status"]
    if status == "in_progress":
        await message.answer("‚ö† –ú–∏–π–∫–∞ –≤–∂–µ –ø–æ—á–∞—Ç–∞")
        return
    elif status == "finished":
        await message.answer("‚ö† –ú–∏–π–∫–∞ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return

    # –ü–æ—á–∏–Ω–∞—î–º–æ –º–∏–π–∫—É
    await db_execute(
        "UPDATE bookings SET status='in_progress', actual_start=NOW() WHERE id=$1",
        booking_id
    )
    await message.answer(f"‚úÖ –ú–∏–π–∫–∞ {booking_id} –ø–æ—á–∞–ª–∞—Å—å!")

@router.message(Command("finish_wash"))
async def finish_wash(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–º–∞—î –ø—Ä–∞–≤")
        return

    parts = message.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        await message.answer("‚ö† –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /finish_wash <ID>")
        return

    booking_id = int(parts[1])
    row = await db_fetchrow("SELECT status FROM bookings WHERE id=$1", booking_id)
    if not row:
        await message.answer("‚ùå –¢–∞–∫–æ–≥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–µ —ñ—Å–Ω—É—î")
        return

    status = row["status"]
    if status == "finished":
        await message.answer("‚ö† –ú–∏–π–∫–∞ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return

    # –Ø–∫—â–æ –º–∏–π–∫–∞ —â–µ –Ω–µ —Å—Ç–∞—Ä—Ç—É–≤–∞–ª–∞, —Å—Ç–∞—Ä—Ç—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
    await db_execute(
        """
        UPDATE bookings
        SET status='finished',
            actual_start=COALESCE(actual_start, NOW()),
            actual_end=NOW()
        WHERE id=$1
        """,
        booking_id
    )
    await message.answer(f"‚úÖ –ú–∏–π–∫–∞ {booking_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö —É —á–µ—Ä–∑—ñ –ø—ñ—Å–ª—è BUFFER
    await notify_next_after_buffer(booking_id)


@router.message(Command("show_statistic"))
async def show_statistic(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–º–∞—î –ø—Ä–∞–≤")
        return

    args = message.text.split()
    start_date = None
    end_date = None

    try:
        if len(args) == 1:
            # –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ -> —Å—å–æ–≥–æ–¥–Ω—ñ
            start_date = datetime.today().date()
            end_date = start_date
        elif len(args) == 2:
            # —Ç—ñ–ª—å–∫–∏ –ø–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞
            start_date = datetime.strptime(args[1], "%d.%m.%Y").date()
            end_date = datetime.today().date()
        elif len(args) >= 3:
            start_date = datetime.strptime(args[1], "%d.%m.%Y").date()
            end_date = datetime.strptime(args[2], "%d.%m.%Y").date()
    except Exception:
        await message.answer("‚ö† –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /show_statistic <–¥–∞—Ç–∞_–ø–æ—á–∞—Ç–∫—É> [–¥–∞—Ç–∞_–∫—ñ–Ω—Ü—è]\n–ü—Ä–∏–∫–ª–∞–¥: /show_statistic 01.08.2025 25.08.2025")
        return

    rows = await db_fetch(
        """
        SELECT p.name, COUNT(*) AS cnt, SUM(p.price) AS total
        FROM bookings b
        LEFT JOIN programs p ON p.id = b.program_id
        WHERE b.booking_datetime::date BETWEEN $1 AND $2
        GROUP BY p.name
        ORDER BY cnt DESC
        """,
        start_date, end_date
    )

    total_count = sum(r["cnt"] for r in rows)
    total_sum = sum(float(r["total"] or 0) for r in rows)

    if not rows:
        await message.answer(f"üì≠ –ù–µ–º–∞—î –±—Ä–æ–Ω—é–≤–∞–Ω—å –∑ {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}")
        return

    text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑ {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}\n\n"
        f"üî¢ –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤: {total_count}\n"
        f"üíµ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_sum:.2f} –≥—Ä–Ω\n\n"
        f"–†–æ–∑–±–∏–≤–∫–∞ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–∞—Ö:\n"
    )

    for r in rows:
        text += f"‚ñ´ {r['name']}: {r['cnt']} —Ä–∞–∑(—ñ–≤), {float(r['total'] or 0):.2f} –≥—Ä–Ω\n"

    await message.answer(text)


@router.message(Command("add_program"))
async def add_program(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–º–∞—î –ø—Ä–∞–≤")
        return

    # –û—á—ñ–∫—É—î–º–æ: /add_program <–Ω–∞–∑–≤–∞> <–≥–æ–¥:—Ö–≤:—Å–µ–∫> <—Ü—ñ–Ω–∞> <–æ–ø–∏—Å>
    parts = message.text.split(maxsplit=4)
    if len(parts) < 5:
        await message.answer("‚ö† –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /add_program <–Ω–∞–∑–≤–∞> <–≥–æ–¥:—Ö–≤:—Å–µ–∫> <—Ü—ñ–Ω–∞> <–æ–ø–∏—Å>")
        return

    name = parts[1]
    duration_str = parts[2]
    price_str = parts[3]
    description = parts[4]

    try:
        h, m, s = map(int, duration_str.split(":"))
        duration_minutes = h * 60 + m + s // 60
        price = float(price_str)
    except Exception:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É –∞–±–æ —Ü—ñ–Ω–∏")
        return

    try:
        await db_execute(
            "INSERT INTO programs (name, duration, price, description) VALUES ($1, $2, $3, $4)",
            name, duration_minutes, price, description
        )
        await message.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ '{name}' ({duration_minutes} —Ö–≤, {price:.2f} –≥—Ä–Ω)\nüìÑ {description}")
    except asyncpg.UniqueViolationError:
        await message.answer("‚ùå –ü—Ä–æ–≥—Ä–∞–º–∞ –≤–∂–µ —ñ—Å–Ω—É—î")
    except Exception as e:
        await message.answer(f"‚ö† –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è: {e}")

@router.message(Command("edit_program"))
async def edit_program(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–º–∞—î –ø—Ä–∞–≤")
        return

    parts = message.text.split(maxsplit=3)
    if len(parts) < 4:
        await message.answer("‚ö† –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /edit_program <id> <name|duration|price|description> <–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è>")
        return

    try:
        program_id = int(parts[1])
        field = parts[2].lower()
        new_value = parts[3]
    except Exception:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç")
        return

    if field not in ["name", "duration", "price", "description"]:
        await message.answer("‚ùå –ú–æ–∂–Ω–∞ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –ª–∏—à–µ: name, duration, price, description")
        return

    try:
        if field == "duration":
            h, m, s = map(int, new_value.split(":"))
            new_value_casted = h * 60 + m + s // 60
        elif field == "price":
            new_value_casted = float(new_value)
        else:
            new_value_casted = new_value

        await db_execute(f"UPDATE programs SET {field}=$1 WHERE id=$2", new_value_casted, program_id)
        await message.answer(f"‚úè –ü—Ä–æ–≥—Ä–∞–º—É {program_id} –∑–º—ñ–Ω–µ–Ω–æ: {field} = {new_value_casted}")
    except Exception as e:
        await message.answer(f"‚ö† –ü–æ–º–∏–ª–∫–∞: {e}")

@router.message(Command("add_admin"))
async def add_admin(message: types.Message):
    if message.from_user.id != MAIN_ADMIN_ID:
        await message.answer("‚ùå –õ–∏—à–µ –≥–æ–ª–æ–≤–Ω–∏–π –∞–¥–º—ñ–Ω –º–æ–∂–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ–≤")
        return

    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("‚ö† –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /add_admin <user_id>")
        return

    try:
        user_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå user_id –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
        return

    try:
        await db_execute("INSERT INTO admins (user_id) VALUES ($1) ON CONFLICT (user_id) DO NOTHING", user_id)
        await message.answer(f"‚úÖ {user_id} –¥–æ–¥–∞–Ω–∏–π —É –∞–¥–º—ñ–Ω–∏")
    except Exception as e:
        await message.answer(f"‚ö† –ü–æ–º–∏–ª–∫–∞: {e}")

@router.message(Command("del_admin"))
async def del_admin(message: types.Message):
    if message.from_user.id != MAIN_ADMIN_ID:
        await message.answer("‚ùå –õ–∏—à–µ –≥–æ–ª–æ–≤–Ω–∏–π –∞–¥–º—ñ–Ω –º–æ–∂–µ –≤–∏–¥–∞–ª—è—Ç–∏ –∞–¥–º—ñ–Ω—ñ–≤")
        return

    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("‚ö† –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /del_admin <user_id>")
        return

    try:
        target_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå user_id –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
        return

    await db_execute("DELETE FROM admins WHERE user_id=$1", target_id)
    await message.answer(f"üóë {target_id} –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ –∞–¥–º—ñ–Ω—ñ–≤")

@router.message(Command("admins"))
async def list_admins(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–º–∞—î –ø—Ä–∞–≤")
        return

    rows = await db_fetch("SELECT user_id FROM admins ORDER BY user_id")
    admins_ids = [MAIN_ADMIN_ID] + [r["user_id"] for r in rows]

    text = "üìã –ê–¥–º—ñ–Ω–∏:\n"
    for admin_id in admins_ids:
        try:
            user = await bot.get_chat(admin_id)
            username = f"@{user.username}" if user.username else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        except Exception:
            username = "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        text += f"{admin_id} | {username}\n"

    await message.answer(text)

@router.message(Command("show_booking"))
async def show_booking(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–º–∞—î –ø—Ä–∞–≤")
        return

    parts = message.text.split(maxsplit=1)
    filter_clause = ""
    params = []
    include_finished = False

    if len(parts) > 1:
        arg = parts[1]
        include_finished = True  # —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä ‚Üí –ø–æ–∫–∞–∑—É—î–º–æ finished —Ç–µ–∂

        # –°–ø—Ä–æ–±—É—î–º–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –¥–∞—Ç—É (dd.mm.yyyy)
        try:
            date = datetime.strptime(arg, "%d.%m.%Y").date()
            filter_clause = "AND b.booking_datetime::date = $1"
            params.append(date)
        except ValueError:
            # –Ø–∫—â–æ —Ü–µ —á–∏—Å–ª–æ ‚Üí –≤–≤–∞–∂–∞—î–º–æ user_id
            if arg.isdigit():
                filter_clause = "AND b.user_id = $1"
                params.append(int(arg))
            else:
                # –Ü–Ω–∞–∫—à–µ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ –Ω–æ–º–µ—Ä—É –∞–≤—Ç–æ (LIKE)
                filter_clause = "AND b.car_number ILIKE $1"
                params.append(f"%{arg}%")

    # —è–∫—â–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –Ω–µ–º–∞ ‚Üí –ø–æ–∫–∞–∑—É—î–º–æ –ª–∏—à–µ –∞–∫—Ç–∏–≤–Ω—ñ
    status_condition = "" if include_finished else "AND b.status != 'finished'"

    query = f"""
        SELECT b.id, b.user_id, b.username, b.phone_number, p.name AS program_name,
               b.car_number, b.booking_datetime, b.status, b.actual_start, b.actual_end
        FROM bookings b
        LEFT JOIN programs p ON p.id = b.program_id
        WHERE TRUE {status_condition} {filter_clause}
        ORDER BY
            CASE WHEN b.status='in_progress' THEN 0 ELSE 1 END,
            b.booking_datetime ASC
    """

    rows = await db_fetch(query, *params)

    if not rows:
        await message.answer("üì≠ –ù–µ–º–∞—î –±—Ä–æ–Ω—é–≤–∞–Ω—å –∑–∞ —Ü–∏–º —Ñ—ñ–ª—å—Ç—Ä–æ–º")
        return

    text = "üìã –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:\n\n"
    for r in rows:
        booking_time = r["booking_datetime"]
        status = r["status"]
        actual_start = r["actual_start"].strftime("%H:%M") if r["actual_start"] else "‚Äî"
        actual_end = r["actual_end"].strftime("%H:%M") if r["actual_end"] else "‚Äî"

        text += (
            f"ID: {r['id']} | –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üë§ UserID: {r['user_id']} | @{r['username']}\n"
            f"üìû {r['phone_number']}\n"
            f"üöó {r['car_number']}\n"
            f"üìÖ –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ: {booking_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"üïí –ü–æ—á–∞—Ç–æ–∫: {actual_start} | –ö—ñ–Ω–µ—Ü—å: {actual_end}\n"
            f"üßæ –ü—Ä–æ–≥—Ä–∞–º–∞: {r['program_name']}\n"
            f"--------------------------------------------\n"
        )

    await message.answer(text)

@router.message(Command("delete"))
async def delete_booking(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–º–∞—î –ø—Ä–∞–≤")
        return

    parts = message.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        await message.answer("‚ö† –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /delete <ID>")
        return

    booking_id = int(parts[1])
    row = await db_fetchrow("SELECT id, user_id, car_number FROM bookings WHERE id=$1", booking_id)
    if not row:
        await message.answer("‚ùå –¢–∞–∫–æ–≥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–µ —ñ—Å–Ω—É—î")
        return

    await db_execute("DELETE FROM bookings WHERE id=$1", booking_id)
    await message.answer(f"üóë –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è {booking_id} –≤–∏–¥–∞–ª–µ–Ω–æ")

    # üîî –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await send_notify(
        row["user_id"],
        f"‚ùå –í–∞—à–µ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è üöó {row['car_number']} –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    )

@dp.message(Command("edit"))
async def cmd_edit(message: types.Message):
    try:
        parts = message.text.split()

        if len(parts) < 2:
            await message.answer("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /edit <id> [<dd.mm.yyyy>] [<HH:MM>] [status <scheduled|in_progress|finished>]")
            return

        booking_id = int(parts[1])
        booking = await db_fetchrow("SELECT * FROM bookings WHERE id=$1", booking_id)

        if not booking:
            await message.answer(f"‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{booking_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        new_date = None
        new_time = None
        new_status = None

        # --- –ø–∞—Ä—Å–∏–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ ---
        i = 2
        while i < len(parts):
            part = parts[i]

            # —Å—Ç–∞—Ç—É—Å
            if part.lower() == "status":
                if i + 1 >= len(parts):
                    await message.answer("‚ùå –í–∫–∞–∂—ñ—Ç—å —Å—Ç–∞—Ç—É—Å –ø—ñ—Å–ª—è 'status'")
                    return
                candidate = parts[i + 1].lower()
                if candidate not in ("scheduled", "in_progress", "finished"):
                    await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Å—Ç–∞—Ç—É—Å! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: scheduled, in_progress, finished")
                    return
                new_status = candidate
                i += 2
                continue

            # –¥–∞—Ç–∞
            try:
                parsed_date = datetime.strptime(part, "%d.%m.%Y").date()
                new_date = parsed_date
                i += 1
                continue
            except ValueError:
                pass

            # —á–∞—Å
            try:
                time_str = part.replace(".", ":")  # –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ 17.41 —ñ 17:41
                parsed_time = datetime.strptime(time_str, "%H:%M").time()
                new_time = parsed_time
                i += 1
                continue
            except ValueError:
                pass

            await message.answer(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {part}")
            return

        # --- –æ–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ ---
        updates = []
        params = []

        if new_date or new_time:
            current_dt = booking["booking_datetime"]

            if new_date and new_time:
                updated_dt = datetime.combine(new_date, new_time)
            elif new_date:
                updated_dt = datetime.combine(new_date, current_dt.time())
            elif new_time:
                updated_dt = datetime.combine(current_dt.date(), new_time)
            else:
                updated_dt = current_dt

            updates.append("booking_datetime=$1")
            params.append(updated_dt)

        if new_status:
            updates.append(f"status=${len(params)+1}")
            params.append(new_status)

        if not updates:
            await message.answer("‚ÑπÔ∏è –ù—ñ—á–æ–≥–æ –Ω–µ –∑–º—ñ–Ω–µ–Ω–æ. –î–æ–¥–∞–π—Ç–µ –¥–∞—Ç—É, —á–∞—Å –∞–±–æ —Å—Ç–∞—Ç—É—Å.")
            return

        query = f"UPDATE bookings SET {', '.join(updates)} WHERE id=${len(params)+1}"
        params.append(booking_id)

        await db_execute(query, *params)

        # –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        booking = await db_fetchrow("SELECT user_id FROM bookings WHERE id=$1", booking_id)
        if booking:
            text_notify = f"üîî –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{booking_id} –±—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ."
            if new_date or new_time:
                text_notify += f"\nüìÖ –ù–æ–≤–∞ –¥–∞—Ç–∞/—á–∞—Å: {updated_dt.strftime('%d.%m.%Y %H:%M')}"
            if new_status:
                text_notify += f"\nüìå –ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å: {new_status}"
            await send_notify(booking["user_id"], text_notify)

        # –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω–∞
        text_admin = f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{booking_id} –∑–º—ñ–Ω–µ–Ω–æ."
        if new_date or new_time:
            text_admin += f"\nüìÖ –ù–æ–≤–∞ –¥–∞—Ç–∞/—á–∞—Å: {updated_dt.strftime('%d.%m.%Y %H:%M')}"
        if new_status:
            text_admin += f"\nüìå –ù–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å: {new_status}"

        await message.answer(text_admin)

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {e}")

# ---------- –ë–†–û–ù–Æ–í–ê–ù–ù–Ø –î–õ–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í ----------
@router.message(Command("book"))
async def book_program(message: types.Message):
    programs = await get_programs()
    if not programs:
        await message.answer("–ü—Ä–æ–≥—Ä–∞–º–∏ —â–µ –Ω–µ –¥–æ–¥–∞–Ω—ñ.")
        return
    buttons = [[KeyboardButton(text=f"{p[0]} - {p[1]}")] for p in programs]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É:", reply_markup=keyboard)
    user_booking[message.from_user.id] = {}

@router.message()
async def process_booking(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_booking:
        return
    data = user_booking[user_id]


    # 1) –ü—Ä–æ–≥—Ä–∞–º–∞
    if "program_id" not in data:
        try:
            data["program_id"] = int(message.text.split(" - ")[0])
        except Exception:
            await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É –∫–Ω–æ–ø–∫–æ—é.")
            return
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É:", reply_markup=generate_date_buttons())
        return

    # 2) –î–∞—Ç–∞
    if "booking_date" not in data:
        try:
            date = datetime.strptime(message.text, "%d.%m.%Y").date()
            if date < datetime.today().date():
                raise ValueError
            data["booking_date"] = date
        except Exception:
            await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –¥–∞—Ç–∞")
            return

        hours = await get_available_hours(data["program_id"], data["booking_date"])
        if not hours:
            await message.answer("‚ùå –ù–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –≥–æ–¥–∏–Ω, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –¥–∞—Ç—É", reply_markup=generate_date_buttons())
            data.pop("booking_date")
            return

        buttons = [[KeyboardButton(text=h)] for h in hours]
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –≥–æ–¥–∏–Ω—É:", reply_markup=ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True))
        return

    # 3) –ß–∞—Å
    if "booking_time" not in data:
        hours = await get_available_hours(data["program_id"], data["booking_date"])
        if message.text not in hours:
            await message.answer("‚ùå –¶—è –≥–æ–¥–∏–Ω–∞ –≤–∂–µ –∑–∞–π–Ω—è—Ç–∞")
            return
        data["booking_time"] = message.text
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ:", reply_markup=ReplyKeyboardRemove())
        return

    # 4) –ê–≤—Ç–æ
    if "car_number" not in data:
        if not re.match(r"^[A-Z–ê-–Ø–Ü–á–Ñ]{2}\d{4}[A-Z–ê-–Ø–Ü–á–Ñ]{2}$", message.text.upper()):
            await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü—Ä–∏–∫–ª–∞–¥: AA1234BB")
            return
        data["car_number"] = message.text.upper()
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üìû –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
            resize_keyboard=True
        )
        await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=kb)
        return

    # 5) –¢–µ–ª–µ—Ñ–æ–Ω
    if "phone_number" not in data:
        phone_number = None

        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–¥—ñ–ª–∏–≤—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
        if message.contact and message.contact.phone_number:
            phone_number = message.contact.phone_number

        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤—ñ–≤ –≤—Ä—É—á–Ω—É
        elif message.text:
            digits = "".join([c for c in message.text if c.isdigit()])
            if len(digits) >= 9:  # –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞
                if not message.text.startswith("+"):
                    phone_number = "+" + digits
                else:
                    phone_number = message.text
            else:
                kb = ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="üìû –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
                    resize_keyboard=True
                )
                await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑ –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ—é.", reply_markup=kb)
                return


        if not phone_number:
            kb = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üìû –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
                resize_keyboard=True
            )
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –∞–±–æ –≤—Ä—É—á–Ω—É):", reply_markup=kb)
            return

        # üîπ –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
        data["phone_number"] = phone_number
        await save_user(message.from_user, phone_number)

        booking_dt = datetime.combine(
            data["booking_date"],
            datetime.strptime(data["booking_time"], "%H:%M").time()
        )
        username = message.from_user.username or "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"

        await db_execute(
            """
            INSERT INTO bookings (user_id, username, phone_number, program_id, car_number, booking_datetime)
            VALUES ($1, $2, $3, $4, $5, $6)
            """,
            user_id,
            username,
            data["phone_number"],
            data["program_id"],
            data["car_number"],
            booking_dt,
        )

        await message.answer(
            f"‚úÖ –ó–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ:\n"
            f"üìÖ {data['booking_date']} ‚è∞ {data['booking_time']}\n"
            f"üöó {data['car_number']}\n"
            f"üìû {data['phone_number']}",
            reply_markup=main_menu
        )
        user_booking.pop(user_id, None)
        return



# ---------- –°–¢–ê–†–¢ ----------
async def main():
    global pool
    # SSL –¥–ª—è Supabase –∑–∞–∑–≤–∏—á–∞–π –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω —è–≤–Ω–æ –≤ URI, –∞–ª–µ —è–∫—â–æ —É –≤–∞—Å –≤–∏–º–∞–≥–∞—î ‚Äî –¥–æ–¥–∞–π—Ç–µ ?sslmode=require
    pool = await asyncpg.create_pool(DATABASE_URL, min_size=1, max_size=5)
    await init_db()
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
